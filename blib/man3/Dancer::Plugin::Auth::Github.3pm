.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dancer::Plugin::Auth::Github 3"
.TH Dancer::Plugin::Auth::Github 3 "2013-01-01" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer::Plugin::Auth::Github \- Authenticate with Github
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package YourDancerApplication;
\&
\&    use Dancer \*(Aq:syntax\*(Aq;
\&    use Dancer::Plugin::Auth::Github;
\&
\&    #You must use a session backend. 
\&    #You should be able to use any backend support by dancer.
\&    set \*(Aqsession\*(Aq      => \*(AqSimple\*(Aq;
\&    
\&    #make sure you call this first.
\&    #initializes the config
\&    auth_github_init();
\&
\&    hook before => sub {
\&        #we don\*(Aqt want to be in a redirect loop
\&        return if request\->path =~ m{/auth/github/callback};
\&        if (not session(\*(Aqgithub_user\*(Aq)) {
\&            redirect auth_github_authenticate_url;
\&        }
\&    };
\&
\&    #by default success will redirect to this route
\&    get \*(Aq/\*(Aq => sub {
\&        "Hello, ".session(\*(Aqgithub_user\*(Aq)\->{\*(Aqlogin\*(Aq};
\&        #For all the github_user properties
\&        #look at http://developer.github.com/v3/users/
\&        #See the Response for "Get the authenticated user"
\&    };
\&
\&    #additionally the plugin adds session(\*(Aqgithub_access_token\*(Aq)
\&    #so you can use it if you\*(Aqre doing other things with GitHub Api.
\&
\&    #by default authentication failure will redirect to this route
\&    get \*(Aq/auth/github/failed\*(Aq => sub { return "Github authentication Failed" };
\&
\&    ...
.Ve
.SH "CONCEPT"
.IX Header "CONCEPT"
This plugin helps you setup authentication with github OAuth api in your dancer application. 
It has a helper method that returns the \s-1URL\s0 you must redirect to for authentication with github,
it then defines a callback that handles the rest and if the user was authenticated, his/her info 
is stored in a session object \f(CW\*(C`session(\*(Aqgithub_user\*(Aq)\*(C'\fR. The plugin also adds \f(CW\*(C`session(\*(Aqgithub_access_token)\*(C'\fR 
if you're doing anything else with github api.
.SH "PREREQUESITES"
.IX Header "PREREQUESITES"
In order for this plugin to work, you need the following:
.IP "\(bu" 4
Github application
.Sp
You must register your github application here <https://github.com/settings/applications/new>. You also need 
to set the callback url in your application settings to \f(CW\*(C`yourdomain.com/auth/github/callback\*(C'\fR. Note, for testing 
purposes GitHub allows you to use \f(CW\*(C`http://127.0.0.1:3000\*(C'\fR as your application url.
.IP "\(bu" 4
Configuration
.Sp
The plugin needs to be configured with your \f(CW\*(C`client_id\*(C'\fR and \f(CW\*(C`client_secret\*(C'\fR 
(provided by Github once you register your application).
.Sp
Set this in your Dancer's configuration under
\&\f(CW\*(C`plugins/Auth::Github\*(C'\fR:
.Sp
.Vb 9
\&    # config.yml
\&    ...
\&        plugins:
\&          "Auth::Github":
\&            client_id: "abcde"
\&            client_secret: "abcde"
\&            scope: ""
\&            github_auth_failed: "/fail"
\&            github_auth_success: "/"
.Ve
.Sp
There is an optional scope, which can be one of the scopes here  <http://developer.github.com/v3/oauth/#scopes>. 
Don't include scope if you just need the authenticated user
\&.\f(CW\*(C`github_auth_success\*(C'\fR and \f(CW\*(C`github_auth_failed\*(C'\fR are optional and default to 
\&'/' and '/auth/github/failed', respectively.
.IP "\(bu" 4
Session backend
.Sp
You need to setup a session backend in your dancer application for everything to work.
This plugin stores the authenticated user in a session with the name \f(CW\*(C`github_user\*(C'\fR
.Sp
You should be able to use any session backend, see
Dancer::Session for details about various Dancer session backends, or
http://search.cpan.org/search?query=Dancer\-Session.
.SH "EXPORT"
.IX Header "EXPORT"
The plugin exports the following symbols to your application's namespace:
.SS "auth_github_init"
.IX Subsection "auth_github_init"
This function should be called before all your route handlers. It loads up the configuration
from your \f(CW\*(C`config.yml\*(C'\fR
.SS "auth_github_authenticate_url"
.IX Subsection "auth_github_authenticate_url"
This function returns an \s-1URL\s0 that is used to authenticate with github
You could put it in a hook like this:
.PP
.Vb 4
\&     hook \*(Aqbefore\*(Aq => sub {
\&        # we don\*(Aqt want a redirect loop here
\&        #Github will call /auth/github/callback once the user is authenticated
\&        return if request\->path =~ m{/auth/github/callback};
\&    
\&        if (not session(\*(Aqgithub_user\*(Aq)) {
\&            redirect auth_github_authenticate_url();
\&        }
\&    };
.Ve
.PP
(See this page <http://search.cpan.org/dist/Dancer/lib/Dancer/Introduction.pod#Before_hooks> 
for more on \f(CW\*(C`before hooks\*(C'\fR)
.SH "ROUTE HANDLERS"
.IX Header "ROUTE HANDLERS"
The plugin defines the following route handler automatically
.SS "/auth/github/callback"
.IX Subsection "/auth/github/callback"
When a user authenticates on Github, Github redirects back to this url. (Note: You must 
set the callback url to this one). The route handler will save the access token and then
retrieve the authenticated user's information in the session.
.PP
If the authentication succeeded, then the plugin will redirect to url setup in the config :
\&\f(CW\*(C`github_auth_success\*(C'\fR, if it failed, then the user is redirected to \f(CW\*(C`github_auth_fail\*(C'\fR. 
By default \f(CW\*(C`github_auth_success = /\*(C'\fR and \f(CW\*(C`github_auth_fail = "/auth/github/failed"\*(C'\fR
.PP
When the authentication succeeds two session objects are created. \f(CW\*(C`session(\*(Aqgithub_user\*(Aq)\*(C'\fR .
For all the github_user properties see this page <http://developer.github.com/v3/users/>.
\&\f(CW\*(C`session(\*(Aqgithub_access_token\*(Aq)\*(C'\fR is also created, if you need to do other things with the api.
.SH "AUTHOR"
.IX Header "AUTHOR"
Gideon Israel Dsouza, \f(CW\*(C`<gideon at cpan.org>\*(C'\fR, <http://www.gideondsouza.com>
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-dancer\-plugin\-auth\-github at rt.cpan.org\*(C'\fR, or through
the web interface at http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Dancer\-Plugin\-Auth\-Github <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Dancer-Plugin-Auth-Github>. 
I will be notified, and then you'll automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Dancer::Plugin::Auth::Github
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker (report bugs here)
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Dancer\-Plugin\-Auth\-Github <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Dancer-Plugin-Auth-Github>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/Dancer\-Plugin\-Auth\-Github <http://annocpan.org/dist/Dancer-Plugin-Auth-Github>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/Dancer\-Plugin\-Auth\-Github <http://cpanratings.perl.org/d/Dancer-Plugin-Auth-Github>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/Dancer\-Plugin\-Auth\-Github/ <http://search.cpan.org/dist/Dancer-Plugin-Auth-Github/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
This project is more or less a port of Dancer::Plugin::Auth::Twitter written by Alexis Sukrieh which itself is a port of 
Catalyst::Authentication::Credential::Twitter written by Jesse Stay.
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Gideon Israel Dsouza.
.PP
This project is open source here on github <https://github.com/gideondsouza/dancer-plugin-auth-github>.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
